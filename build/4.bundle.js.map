{"version":3,"sources":["webpack:///./src/styles/MapsMobile.css?c3d3","webpack:///./src/styles/MapsMobile.css","webpack:///./src/images/my_location.png","webpack:///./src/pages/MapsMobile.tsx"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","push","AxiosLocation","AxiosCancelRequest","axios","AxiosDirection","center","lat","lng","titleCase","str","toLowerCase","split","map","word","replace","toUpperCase","join","MapComponent","googleMap","marker","circle","polygon","autoComplete","directionsService","directionsRenderer","distanceMatrix","mapRef","useRef","inputRef","bottomRef","radiusRef","useState","data","setData","status","setStatus","loading","setLoading","odpStatus","setOdpStatus","touchStart","setTouchStart","inputRadius","setInputRadius","radiusShow","setRadiusShow","bottomShow","setBottomShow","nearest","setNearest","odpMarker","useEffect","googleScript","document","createElement","src","process","window","body","appendChild","addEventListener","google","maps","Map","current","zoom","clickableIcons","disableDefaultUI","gestureHandling","mapTypeControlOptions","position","ControlPosition","BOTTOM_CENTER","Marker","visible","places","Autocomplete","fields","types","componentRestrictions","country","bindTo","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","Polygon","paths","DirectionsService","DirectionsRenderer","suppressMarkers","preserveViewport","DistanceMatrixService","mapEventListener","getLocation","x","setMap","setPosition","setVisible","panTo","setCenter","setRadius","parseFloat","value","url","then","resolve","provinsi","kabupaten","kecamatan","kelurahan","polygonLayer","shape","slice","setPath","kota","name","style","transition","bottom","getDirection","reject","isCancel","console","log","method","long","radius","auth","username","password","odpData","features","filter","attributes","portidlenumber","odpPercent","length","devicePort","deviceportnumber","reduce","acc","idlePort","toFixed","setZoom","dataset","show","panBy","forEach","color","status_occ_add","icon","path","SymbolPath","CIRCLE","scale","latlng","index","distance","geometry","spherical","computeDistanceBetween","getPosition","infoWindow","InfoWindow","device_id","devicename","addListener","close","infoDistance","open","route","origin","destination","travelMode","response","setDirections","alert","dataDistance","sort","a","b","getDistance","getDistanceMatrix","origins","destinations","LatLng","rows","elements","event","place","getPlace","location","viewport","fitBounds","element","getElementsByClassName","addDomListener","e","latLng","className","height","innerHeight","ref","placeholder","my_location","alt","onClick","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","type","min","max","step","onChange","target","readOnly","display","data-show","onTouchStart","touches","clientY","onTouchMove","touchPos","changedTouches","touchStartEdge","onTouchEnd","Number","data-nearest"],"mappings":"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","file":"4.bundle.js","sourcesContent":["var api = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js??ref--4-2!./MapsMobile.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"body{overscroll-behavior:contain;overflow:hidden}img:press{outline:none}.map-page{width:100vw}.map-container{width:100%;height:100%}.map-top{position:fixed;display:grid;grid-template-columns:auto 50px;top:10px;width:95%;max-width:600px;height:50px;background-color:white;border-radius:5px;left:50%;transform:translate(-50%);box-shadow:0 2px 4px 2px rgba(0,0,0,0.4)}.map-top-search{outline:none;padding-left:17px;border:none;border-radius:5px}.map-top-findme{justify-self:center;align-self:center}.map-radius-icon{position:absolute;right:10px;top:80px;width:40px;height:40px;background-color:salmon;z-index:2;border-radius:5px;box-shadow:0 2px 4px 2px rgba(0,0,0,0.4)}.map-radius-con{position:absolute;display:grid;grid-template-columns:1fr;justify-items:center;vertical-align:center;top:80px;width:95%;max-width:600px;height:100px;font-size:larger;font-weight:bold;background-color:white;box-sizing:border-box;padding:20px;border-radius:5px;left:50%;transform:translate(-50%);box-shadow:0 2px 4px 2px rgba(0,0,0,0.4);z-index:4}.map-radius-con input{width:80%}.map-radius-bg{position:fixed;left:0;right:0;top:0;bottom:0;z-index:3}.map-bottom{position:fixed;bottom:20px;width:100%;height:200px;background-color:white;border-radius:15px 15px 0 0;transform:translate3d(0, 100%, 0);padding:30px;box-sizing:border-box;box-shadow:0 0 4px 4px rgba(0,0,0,0.3)}.map-bottom-body{width:100%;margin-bottom:15px;background-color:#0288d1;border-radius:3px;padding:10px;box-sizing:border-box;font-size:larger;color:white}.map-bottom-nopick{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);text-align:center;background-color:white;color:black;font-size:xx-large}.map-bottom-odp{text-align:center}.map-nearest{position:absolute;top:-52px;left:8px;background-color:white;border-radius:4px;padding:10px;box-shadow:0 2px 4px 2px rgba(0,0,0,0.4)}.gm-style-cc{display:none !important}.gm-style a[href^=\\\"https://maps.google.com/maps\\\"]{display:none !important}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","export default __webpack_public_path__ + \"src/images/my_location.png\";","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useRef, useEffect, TouchEvent } from \"react\";\nimport axios from \"axios\";\nimport AxiosCancelRequest from \"axios-cancel-request\";\nimport \"../styles/MapsMobile.css\";\nimport my_location from \"../images/my_location.png\";\nconst AxiosLocation = AxiosCancelRequest(axios);\nconst AxiosDirection = AxiosCancelRequest(axios);\nconst center = {\n    lat: -6.2088,\n    lng: 106.8456,\n};\n\nfunction titleCase(str: string): string {\n    return str\n        .toLowerCase()\n        .split(\" \")\n        .map(function (word) {\n            return word.replace(word[0], word[0].toUpperCase());\n        })\n        .join(\" \");\n}\n\nconst MapComponent = () => {\n    const mapRef = useRef<HTMLDivElement>();\n    const inputRef = useRef<HTMLInputElement>();\n    const bottomRef = useRef<HTMLDivElement>();\n    const radiusRef = useRef<HTMLInputElement>();\n    const [data, setData] = useState(\"\");\n    const [status, setStatus] = useState(\"No location selected.\");\n    const [loading, setLoading] = useState(true);\n    const [odpStatus, setOdpStatus] = useState(\"\");\n    const [touchStart, setTouchStart] = useState(0);\n    const [inputRadius, setInputRadius] = useState(\"200\");\n    const [radiusShow, setRadiusShow] = useState(false);\n    const [bottomShow, setBottomShow] = useState(false);\n\n    // 0: No menu, 1: Menu hide, 2: Menu show\n    const [nearest, setNearest] = useState(0);\n\n    // Initialize an variables to call it later\n    let googleMap;\n    let marker;\n    let circle;\n    let polygon;\n    let autoComplete;\n    let odpMarker = [];\n    let directionsService;\n    let directionsRenderer;\n    let distanceMatrix;\n\n    useEffect(() => {\n        // Create script element and call google maps api\n        const googleScript = document.createElement(\"script\");\n        googleScript.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.GOOGLE_API}&libraries=places,geometry`;\n        window.document.body.appendChild(googleScript);\n\n        googleScript.addEventListener(\"load\", async () => {\n            // Maps initialize\n            googleMap = new window.google.maps.Map(mapRef.current, {\n                zoom: 15,\n                center: center,\n                clickableIcons: false,\n                disableDefaultUI: true,\n                gestureHandling: \"greedy\",\n                mapTypeControlOptions: {\n                    position: window.google.maps.ControlPosition.BOTTOM_CENTER,\n                },\n            });\n\n            // Marker initialize\n            marker = new window.google.maps.Marker({\n                map: googleMap,\n                visible: false,\n            });\n\n            // AutoComplete initialize, cannot use useRef to get element\n            autoComplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n                fields: [\"geometry\", \"name\"],\n                types: [\"geocode\"],\n                componentRestrictions: { country: [\"id\"] },\n            });\n            autoComplete.bindTo(\"bounds\", googleMap);\n\n            // Radius circle initialize\n            circle = new window.google.maps.Circle({\n                map: googleMap,\n                strokeColor: \"#FF0000\",\n                strokeOpacity: 0,\n                strokeWeight: 0,\n                fillColor: \"#FF0000\",\n                fillOpacity: 0.2,\n                clickable: false,\n            });\n\n            // Polygon initialize\n            polygon = new window.google.maps.Polygon({\n                map: googleMap,\n                paths: [],\n                strokeColor: \"#FF0000\",\n                strokeOpacity: 0.5,\n                strokeWeight: 2,\n                fillOpacity: 0,\n                clickable: false,\n            });\n\n            // Directions initialize\n            directionsService = new window.google.maps.DirectionsService();\n            directionsRenderer = new window.google.maps.DirectionsRenderer({\n                suppressMarkers: true,\n                preserveViewport: true,\n            });\n\n            // Distance Matrix initialize\n            distanceMatrix = new window.google.maps.DistanceMatrixService();\n\n            mapEventListener();\n        });\n    }, []);\n\n    const getLocation = (lat: number, lng: number) => {\n        odpMarker.map((x) => x.setMap(null));\n        if (directionsRenderer) directionsRenderer.setMap(null);\n\n        marker.setPosition({ lat, lng });\n        marker.setVisible(true);\n\n        polygon.setMap(null);\n        googleMap.panTo({ lat, lng });\n\n        circle.setMap(null);\n        circle.setMap(googleMap);\n        circle.setCenter({ lat, lng });\n        circle.setRadius(parseFloat(radiusRef.current.value));\n\n        setLoading(true);\n        setStatus(\"Fetching data...\");\n\n        AxiosLocation({ url: `https://siis-api.udata.id/point_kelurahan/${lng},${lat}` })\n            .then((resolve) => {\n                const { provinsi, kabupaten, kecamatan, kelurahan, shape } = resolve.data.data[0];\n                const polygonLayer = shape\n                    .slice(11, -2)\n                    .split(\", \")\n                    .map((x: string) => {\n                        const split = x.split(\" \");\n                        return { lat: parseFloat(split[1]), lng: parseFloat(split[0]) };\n                    });\n                polygon.setPath(polygonLayer);\n                polygon.setMap(googleMap);\n                const kota = kabupaten.split(\" \")[0] === \"KOTA\" ? kabupaten.replace(\"KOTA \", \"\") : kabupaten;\n\n                const name = `Kel. ${titleCase(kelurahan)}, Kec. ${titleCase(kecamatan)}, ${kota ? \"Kota\" : \"Kab.\"} ${titleCase(kota)}, ${titleCase(\n                    provinsi\n                ).replace(\"Dki\", \"DKI\")}`;\n\n                setLoading(false);\n                setData(name);\n                setOdpStatus(\"Fetching ODP data...\");\n\n                bottomRef.current.style.transition = \".3s\";\n                bottomRef.current.style.bottom = \"200px\";\n                setBottomShow(true);\n                getDirection(lat, lng);\n            })\n            .catch((reject) => {\n                if (!axios.isCancel(reject)) {\n                    console.log(reject);\n                    setStatus(\"Fetching failed!\");\n                }\n            });\n    };\n\n    const getDirection = (lat: number, lng: number): void => {\n        AxiosDirection({\n            url: \"http://digitasi-consumer-siis-dev.vsan-apps.playcourt.id/api/siis/v1/get-odp\",\n            method: \"post\",\n            data: { lat: lat, long: lng, radius: radiusRef.current.value },\n            auth: { username: \"telkom\", password: process.env.ODP_PASSWORD },\n        })\n            .then((resolve) => {\n                const odpData = resolve.data.data.features.filter((x: ODP) => x.attributes.portidlenumber > 0);\n                let odpPercent = 0;\n                if (odpData.length) {\n                    const devicePort = odpData.map((x: ODP) => x.attributes.deviceportnumber).reduce((acc: number, x: number) => acc + x);\n                    const idlePort = odpData.map((x: ODP) => x.attributes.portidlenumber).reduce((acc: number, x: number) => acc + x);\n                    odpPercent = parseFloat(((idlePort / devicePort) * 100).toFixed(1));\n                }\n                setOdpStatus(`${odpData.length} ODP found (${odpPercent}%)`);\n                odpMarker = [];\n                googleMap.setCenter({ lat: lat, lng: lng });\n                if (odpData.length) {\n                    if (parseFloat(radiusRef.current.value) <= 150) {\n                        googleMap.setZoom(18);\n                    } else if (parseFloat(radiusRef.current.value) >= 250) {\n                        googleMap.setZoom(16);\n                    } else {\n                        googleMap.setZoom(17);\n                    }\n                }\n                if (bottomRef.current.dataset.show === \"true\") googleMap.panBy(0, 70);\n\n                odpData.forEach((x: ODP, i: number) => {\n                    const data = x.attributes;\n                    let color: string;\n                    switch (data.status_occ_add) {\n                        case \"RED\":\n                            color = \"red\";\n                            break;\n                        case \"YELLOW\":\n                            color = \"yellow\";\n                            break;\n                        case \"GREEN\":\n                            color = \"green\";\n                            break;\n                        default:\n                            color = \"black\";\n                    }\n\n                    odpMarker.push(\n                        new window.google.maps.Marker({\n                            map: googleMap,\n                            position: { lat: data.lat, lng: data.long },\n                            icon: {\n                                path: window.google.maps.SymbolPath.CIRCLE,\n                                scale: 6,\n                                fillColor: color,\n                                fillOpacity: 0.9,\n                                strokeWeight: 0,\n                            },\n                        })\n                    );\n\n                    odpMarker[i].latlng = { lat: data.lat, lng: data.long };\n                    odpMarker[i].index = i;\n                    odpMarker[i].distance = window.google.maps.geometry.spherical.computeDistanceBetween(\n                        marker.getPosition(),\n                        odpMarker[i].getPosition()\n                    );\n\n                    odpMarker[i].infoWindow = new window.google.maps.InfoWindow({\n                        content: `<div>\n\t\t\t\t\t\t<span>Latitude: ${data.lat}</span><br/>\n\t\t\t\t\t\t<span>Longitude: ${data.long}</span><br/>\n\t\t\t\t\t\t<span>Device ID: ${data.device_id}</span><br/>\n\t\t\t\t\t\t<span>Device name: ${data.devicename}</span><br/>\n\t\t\t\t\t\t<span>Status: ${data.status_occ_add}</span><br/>\n\t\t\t\t\t\t<span>Port number: ${data.deviceportnumber}</span><br/>\n\t\t\t\t\t\t<span>Idle port: ${data.portidlenumber}</span>\n\t\t\t\t\t</div>`,\n                    });\n\n                    odpMarker[i].addListener(\"mouseover\", () => {\n                        odpMarker.map((x) => {\n                            x.infoWindow.close();\n                            x.infoDistance?.close();\n                        });\n                        odpMarker[i].infoWindow.open(googleMap, odpMarker[i]);\n                        setNearest(1);\n                    });\n\n                    odpMarker[i].addListener(\"mouseout\", () => {\n                        odpMarker[i].infoWindow.close();\n                    });\n\n                    odpMarker[i].addListener(\"click\", () => {\n                        odpMarker.map((x) => {\n                            x.infoWindow.close();\n                            x.infoDistance?.close();\n                        });\n                        setNearest(1);\n\n                        odpMarker[i].infoWindow.open(googleMap, odpMarker[i]);\n                        directionsService.route(\n                            {\n                                origin: `${lat},${lng}`,\n                                destination: `${data.lat},${data.long}`,\n                                travelMode: \"WALKING\",\n                            },\n                            (response, status) => {\n                                if (status === \"OK\") {\n                                    console.log(response);\n                                    directionsRenderer.setMap(googleMap);\n                                    directionsRenderer.setDirections(response);\n                                } else {\n                                    window.alert(\"Directions request failed due to \" + status);\n                                }\n                            }\n                        );\n                    });\n                });\n\n                const dataDistance = odpMarker\n                    .map((x) => {\n                        return { distance: x.distance, index: x.index, latlng: x.latlng };\n                    })\n                    .sort((a, b) => a.distance - b.distance)\n                    .filter((x, i) => i < 3);\n                getDistance(dataDistance);\n            })\n            .catch((reject) => {\n                if (!axios.isCancel(reject)) {\n                    console.log(reject);\n                    setOdpStatus(\"Fetching ODP failed!\");\n                }\n            });\n    };\n\n    const getDistance = (data) => {\n        distanceMatrix.getDistanceMatrix(\n            {\n                origins: [marker.getPosition()],\n                destinations: data.map((x) => new window.google.maps.LatLng(x.latlng.lat, x.latlng.lng)),\n                travelMode: \"WALKING\",\n            },\n            (response, status) => {\n                if (status === \"OK\") {\n                    setNearest(2);\n                    data.forEach((x, i) => {\n                        odpMarker[data[i].index].infoDistance = new window.google.maps.InfoWindow({\n                            content: `<div>\n\t\t\t\t\t\t\t<span>${response.rows[0].elements[i].distance.value} m</span>\n\t\t\t\t\t\t</div>`,\n                        });\n                        odpMarker[data[i].index].infoDistance.open(googleMap, odpMarker[data[i].index]);\n                    });\n                } else {\n                    window.alert(\"Distances request failed due to \" + status);\n                }\n            }\n        );\n    };\n\n    const mapEventListener = (): void => {\n        window.google.maps.event.addListener(autoComplete, \"place_changed\", () => {\n            const place = autoComplete.getPlace();\n            if (!place.geometry) {\n                alert(\"Quota exceeded!\");\n                return;\n            }\n\n            const { location, viewport } = place.geometry;\n            if (viewport) {\n                googleMap.fitBounds(place.geometry.viewport);\n            } else {\n                googleMap.setCenter(place.geometry.location);\n                googleMap.setZoom(16);\n            }\n\n            getLocation(location.lat(), location.lng());\n        });\n\n        const element = document.getElementsByClassName(\"map-nearest\")[0] as HTMLElement;\n        window.google.maps.event.addDomListener(element, \"click\", () => {\n            if (element.dataset.nearest === \"1\") {\n                odpMarker.map((x, i) => {\n                    x.infoDistance?.open(googleMap, odpMarker[i]);\n                    x.infoWindow.setMap(null);\n                });\n                setNearest(2);\n            } else {\n                odpMarker.map((x) => {\n                    x.infoDistance?.close();\n                });\n                setNearest(1);\n            }\n        });\n\n        googleMap.addListener(\"click\", (e: any): void => {\n            if (inputRef.current) inputRef.current.value = \"\";\n            getLocation(e.latLng.lat(), e.latLng.lng());\n        });\n    };\n\n    const findMe = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                ({ coords }) => {\n                    if (inputRef.current) inputRef.current.value = \"\";\n                    const position = {\n                        lat: coords.latitude,\n                        lng: coords.longitude,\n                    };\n\n                    googleMap.setCenter(position);\n                    googleMap.setZoom(17);\n                    getLocation(coords.latitude, coords.longitude);\n                },\n                () => {\n                    alert(\"The Geolocation service failed.\");\n                }\n            );\n        } else {\n            alert(\"Your browser doesn't support geolocation.\");\n        }\n    };\n\n    const touchMoveHandler = (e: TouchEvent) => {\n        const touchPos = e.changedTouches[0].clientY;\n        let touchStartEdge = window.innerHeight - touchStart;\n        let value = window.innerHeight - touchPos + touchStartEdge;\n        if (bottomShow) {\n            touchStartEdge = 200 - (window.innerHeight - touchStart);\n            value = 200 - (touchPos - (window.innerHeight - 200) - touchStartEdge);\n        }\n\n        if (value > 200) value = 200;\n        bottomRef.current.style.transition = \"none\";\n        bottomRef.current.style.bottom = value + \"px\";\n    };\n\n    const touchEndHandler = () => {\n        const bottomPos = Number(bottomRef.current.style.bottom.replace(\"px\", \"\"));\n        if (bottomPos > 100) {\n            bottomRef.current.style.transition = \".3s\";\n            bottomRef.current.style.bottom = \"200px\";\n            setBottomShow(true);\n        } else {\n            bottomRef.current.style.transition = \".3s\";\n            bottomRef.current.style.bottom = \"20px\";\n            setBottomShow(false);\n        }\n    };\n\n    return (\n        <div className=\"map-page\" style={{ height: window.innerHeight }}>\n            <div className=\"map-container\" ref={mapRef} />\n            <div className=\"map-top\">\n                <input placeholder=\"Search here...\" className=\"map-top-search\" ref={inputRef} />\n                <img src={my_location} alt=\"find-me\" className=\"map-top-findme\" onClick={findMe} />\n            </div>\n            <div\n                className=\"map-radius-icon\"\n                onClick={() => {\n                    setRadiusShow(true);\n                }}\n            />\n            {radiusShow ? (\n                <>\n                    <div\n                        className=\"map-radius-bg\"\n                        onClick={() => {\n                            setRadiusShow(false);\n                        }}\n                    />\n                    <div className=\"map-radius-con\">\n                        <span>Radius: {inputRadius}</span>\n                        <input\n                            type=\"range\"\n                            min=\"100\"\n                            max=\"300\"\n                            step=\"25\"\n                            value={inputRadius}\n                            onChange={(e) => {\n                                setInputRadius(e.target.value);\n                            }}\n                        />\n                    </div>\n                </>\n            ) : (\n                <></>\n            )}\n            <input type=\"number\" ref={radiusRef} value={inputRadius} readOnly style={{ display: \"none\" }} />\n            <div\n                className=\"map-bottom\"\n                ref={bottomRef}\n                data-show={bottomShow}\n                onTouchStart={(e: TouchEvent) => {\n                    setTouchStart(e.touches[0].clientY);\n                }}\n                onTouchMove={touchMoveHandler}\n                onTouchEnd={touchEndHandler}\n            >\n                <div className=\"map-nearest\" data-nearest={nearest} style={{ display: nearest ? \"block\" : \"none\" }}>\n                    {nearest === 1 ? \"Show nearest\" : \"Hide nearest\"}\n                </div>\n                {loading ? (\n                    <div className=\"map-bottom-nopick\">{status}</div>\n                ) : (\n                    <>\n                        <div className=\"map-bottom-data map-bottom-body\">{data}</div>\n                        <div className=\"map-bottom-odp map-bottom-body\">{odpStatus}</div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\ndeclare global {\n    interface Window {\n        google: any;\n    }\n}\n\ninterface Attributes {\n    device_id: number;\n    devicename: string;\n    lat: number;\n    long: number;\n    status_occ_add: string;\n    portidlenumber: number;\n    deviceportnumber: number;\n}\ninterface ODP {\n    attributes: Attributes;\n}\n\nexport default MapComponent;\n"],"sourceRoot":""}